"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { getGameById, updateGameById } from "../../lib/queries";
import { toast } from "sonner";
import type { Game } from "../../../../../lib/interfase";

// –Ø–∑—ã–∫–∏
type Lang = "ru" | "en" | "lv";

export default function EditGamePage() {
  const { id } = useParams<{ id: string }>(); // id —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–≥–æ string
  const router = useRouter();

  const [game, setGame] = useState<Game | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (id) {
      getGameById(id)
        .then(setGame)
        .catch(() => toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"))
        .finally(() => setLoading(false));
    }
  }, [id]);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ø–¥–µ–π—Ç–µ—Ä (–±–µ–∑ any)
  const updateField = <K extends keyof Game>(key: K, value: Game[K]) => {
    setGame((prev) => (prev ? ({ ...prev, [key]: value } as Game) : prev));
  };

  // –ê–ø–¥–µ–π—Ç–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
  const updateML = (
    key: "title_key" | "description_key",
    lang: Lang,
    val: string,
  ) => {
    if (!game) return;
    updateField(key, { ...(game[key] ?? {}), [lang]: val });
  };

  const handleSubmit = async () => {
    if (!game) return;
    try {
      await updateGameById(game.id, game);
      toast.success("–ò–≥—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
      router.push("/admin/games");
    } catch {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
    }
  };

  if (loading) return <div className="p-6 text-white">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (!game) return <div className="p-6 text-red-500">–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</div>;

  return (
    <div className="p-6 max-w-2xl space-y-4">
      <h1 className="text-2xl font-bold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã</h1>

      {/* –ù–∞–∑–≤–∞–Ω–∏–µ RU */}
      <input
        type="text"
        value={game.title_key?.ru ?? ""}
        onChange={(e) => updateML("title_key", "ru", e.target.value)}
        className="w-full p-2 border rounded"
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)"
      />

      {/* –û–ø–∏—Å–∞–Ω–∏–µ RU */}
      <textarea
        value={game.description_key?.ru ?? ""}
        onChange={(e) => updateML("description_key", "ru", e.target.value)}
        className="w-full p-2 border rounded"
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (RU)"
      />

      {/* –ú–∏–Ω –∏–≥—Ä–æ–∫–æ–≤ */}
      <input
        type="number"
        value={game.min_players}
        onChange={(e) => updateField("min_players", Number(e.target.value))}
        className="w-full p-2 border rounded"
        placeholder="–ú–∏–Ω. –∏–≥—Ä–æ–∫–æ–≤"
      />

      {/* –ú–∞–∫—Å –∏–≥—Ä–æ–∫–æ–≤ */}
      <input
        type="number"
        value={game.max_players}
        onChange={(e) => updateField("max_players", Number(e.target.value))}
        className="w-full p-2 border rounded"
        placeholder="–ú–∞–∫—Å. –∏–≥—Ä–æ–∫–æ–≤"
      />

      {/* –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
      <input
        type="number"
        value={game.duration_minutes}
        onChange={(e) =>
          updateField("duration_minutes", Number(e.target.value))
        }
        className="w-full p-2 border rounded"
        placeholder="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)"
      />

      {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
      <input
        type="text"
        value={game.difficulty}
        onChange={(e) => updateField("difficulty", e.target.value)}
        className="w-full p-2 border rounded"
        placeholder="–°–ª–æ–∂–Ω–æ—Å—Ç—å"
      />

      <button
        onClick={handleSubmit}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  );
}
